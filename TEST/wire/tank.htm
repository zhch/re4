	<html>

	<head>
	<script src="../../re4/debug/definitive-log.js"></script>
	<script>
	log.options.debugEnabled=true;
	window.debug=function(args)
	{
		var stack=args[0];
		var msg=args[1];
		log.debug(stack,{_2stack:stack,_1msg:msg});
	}
	</script>
	<style>
		#debug_log { /* Styles for our debug message container */
		background-color: #aaa; /* gray background */
		border: solid black 2px; /* black border */
		overflow: auto; /* scrollbars */
		width: 100%; /* not as wide as full window */
		height: 800px; /* don't take up too much vertical space */
		}
		#debug_log:before { /* Give our logging area a title */
		content: "Debugging Messages";
		display: block;
		text-align: center;
		font: bold 18pt sans-serif ;
		}
		.debug_message { /* Place a thin black line between debug messages */
		border-bottom: solid black 1px;
		}
	</style>

	<title></title>
		



	</script>

	</head>

	<body>
		re4 test:
		<div id="timer"><script>document.write(new Date());</script></div>
		<br />
		<div id="test"></div>
		<input type="button" onclick="clearInterval(interval)" value="stop"/>
		<span style="color:rgb(255,255,0)">X</span>
		<span style="color:rgb(255,0,255)">Y</span>
		<span style="color:rgb(0,255,255)">Z</span>
		<br />
		<input type="button" onclick="xDeg=xDeg+5;" value="x+5"/>
		<input type="button" onclick="xDeg=xDeg-5;" value="x-5"/>
		<input type="button" onclick="yDeg=yDeg+5;" value="y+5"/>
		<input type="button" onclick="yDeg=yDeg-5;" value="y-5"/>
		<input type="button" onclick="zDeg=zDeg+5;" value="z+5"/>
		<input type="button" onclick="zDeg=zDeg-5;" value="z-5"/>

		<script  src="../../re4/fw/fw.js"></script>

		<script src="../../re4/vm/vm.js"></script>

		<script src="../../re4/vm/screen.js"></script>

		<script src="../../re4/math/math.js"></script>
		<script src="../../re4/math/vector.js"></script>
		<script src="../../re4/math/point.js"></script>
		<script src="../../re4/math/matrix.js"></script>
		<script src="../../re4/math/plane.js"></script>

		<script src="../../re4/wire/wire.js"></script>
		<script src="../../re4/wire/poly.js"></script>
		<script src="../../re4/wire/object.js"></script>
		<script src="../../re4/wire/camera.js"></script>



		<script >
		try
		{
			
			var vlist=new Array();			
			var plist=new Array();
			var colors=new Array();
			
			vlist[0]=	new re4.math.Point4D(-30,	50,	-90,	1);
			vlist[1]=	new re4.math.Point4D(30,	50,	-90,	1);
			vlist[2]=	new re4.math.Point4D(20,	20,	40,		1);
			vlist[3]=	new re4.math.Point4D(-20,	20,	40,		1);
			vlist[4]=	new re4.math.Point4D(-20,	20,	-80,	1);
			vlist[5]=	new re4.math.Point4D(20,	20,	-80,	1);
			vlist[6]=	new re4.math.Point4D(-20,	60,	-50,	1); 
			vlist[7]=	new re4.math.Point4D(20,	60,	-50,	1);
			vlist[8]=	new re4.math.Point4D(-25,	50,	-30,	1);
			vlist[9]=	new re4.math.Point4D(25,	50,	-30,	1); 
			vlist[10]=	new re4.math.Point4D(-40,	30,	-100,	1);
			vlist[11]=	new re4.math.Point4D(-30,	10,	100,	1);
			vlist[12]=	new re4.math.Point4D(-70,	0,	-30,	1);
			vlist[13]=	new re4.math.Point4D(-70,	0,	-80,	1);
			vlist[14]=	new re4.math.Point4D(40,	30,	-100,	1);
			vlist[15]=	new re4.math.Point4D(70,	0,	-80,	1);
			vlist[16]=	new re4.math.Point4D(70,	0,	-30,	1);
			vlist[17]=	new re4.math.Point4D(30,	10,	100,	1);
			vlist[18]=	new re4.math.Point4D(0,		70,	-70,	1);
			vlist[19]=	new re4.math.Point4D(0,		70,	20,		1);
			vlist[20]=	new re4.math.Point4D(0,		90,	-100,	1);

			plist[0]=[ 2,9,1];
			plist[1]=[ 2,1,5];
			plist[2]=[ 1,0,4];
			plist[3]=[ 1,4,5];
			plist[4]=[ 0,8,3];
			plist[5]=[0,3,4];
			plist[6]=[2,3,8];
			plist[7]=[2,8,9];
			plist[8]=[6,7,9];
			plist[9]=[6,9,8];
			plist[10]=[0,1,7];
			plist[11]=[0,7,6];
			plist[12]=[0,6,8];
			plist[13]=[1,9,7];
			plist[14]=[10,11,12];
			plist[15]=[10,12,13];
			plist[16]=[14,15,16];
			plist[17]=[14,16,17];
			plist[18]=[20,19,18];
			for(var i=0;i<plist.length;i++)
			{
				colors[i]="00ff00";
			}
			
			var tankScale=[1,1,1];
			var tankPos=[0,0,100];
			var tankRot=[0,0,0];
			var tank=new re4.wire.Object4D (1,"tank", vlist , plist,colors ,tankScale,tankPos,tankRot);

			var vlist=new Array();			
			var plist=new Array();
			var colors=new Array();

			vlist[0]=	new re4.math.Point4D(0,0,0,1);
			vlist[1]=	new re4.math.Point4D(100,0,0,1);
			vlist[2]=	new re4.math.Point4D(0,100,0,1);
			vlist[3]=	new re4.math.Point4D(0,0,100,1);
			plist[0]=[0,1,0];
			plist[1]=[0,2,0];
			plist[2]=[0,3,0];
			colors[0]="ffff00";
			colors[1]="ff00ff";
			colors[2]="00ffff";

			var coord=new re4.wire.Object4D (2,"coord", vlist , plist,colors ,[1,1,1],[0,0,0],[0,0,0]);

			var camPos=new re4.math.Vector4D(0,0,-100,1);
			var camDir=new re4.math.Vector4D(0,0,0,1);
			var cam=new re4.wire.Camera4D ( re4.wire.Camera4D.ATTRIBUTE.EULER_MODEL , camPos ,camDir,null ,50,500,90,400,400);
			cam.buildMatrixEulerThis(re4.wire.Camera4D.ROT_SEQ.YXZ);

			var con=document.getElementById("test");
			var screen=new re4.vm.Screen(con,cam.getViewPortWidth(),cam.getViewPortHeight());


			
			var xDeg=0;
			var yDeg=0;
			var zDeg=0;
			var mrot;
			
			function main()
			{
				mrot=re4.math.Matrix4X4.buildRotationXYZ(re4.math.degree2Radian(xDeg),re4.math.degree2Radian(yDeg),re4.math.degree2Radian(zDeg));
				
				tank.transformThis(mrot,re4.wire.TRANS_COORD.LOCAL_TO_TRANS ,true);				
				//coord.transformThis(mrot,re4.wire.TRANS_COORD.LOCAL_TO_TRANS ,true);	
				
				tank.modelToWorldThis (re4.wire.TRANS_COORD.TRANS_ONLY );
				coord.modelToWorldThis (re4.wire.TRANS_COORD.LOCAL_TO_TRANS );
				
				tank.resetThis ( );
				tank.removeBackFacesThis ( cam );
				
				tank.worldToCameraThis(cam);

				coord.worldToCameraThis(cam);

				tank.cameraToPerspectiveThis(cam);
				coord.cameraToPerspectiveThis(cam);

				tank.perspectiveToScreenThis(cam);	
				coord.perspectiveToScreenThis(cam);

				screen.fillSecondary("000000");
				tank.drawWireTo ( screen , re4.vm.Screen.BUFFER_SELECT.SECONDARY);
				coord.drawWireTo ( screen , re4.vm.Screen.BUFFER_SELECT.SECONDARY);
				screen.flipDisplay ( );
			}
			//main();
			var interval=setInterval(main,1000);
			
		}
		catch (e)
		{
			re4.fw.debug(e,"single-3d-triangle debug");
			throw e;
		}
			
		</script>



	</body>

	</html>
